// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WeLearn.Data;

namespace WeLearn.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20210503200048_AddChangesInRoles")]
    partial class AddChangesInRoles
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WeLearn.Data.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "0554303c-bf76-46df-8930-2f15ffd63058",
                            ConcurrencyStamp = "9439310c-b4dc-4820-98bc-44fcc5d227d5",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("WeLearn.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "96f2bde2-eafb-4fe6-b5e9-fe36f009b8e6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8ff88e53-f59a-4fdd-b979-a1042102a0db",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEJSCZ+c89KfRDby/rkyfWGz4K7Qn/lSche7xVnfcBWQbd+SHKihXb4uRYV+2SG69IA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0ff6a556-e375-41ec-a6aa-c0e74041d1fa",
                            TwoFactorEnabled = false,
                            UserName = "Username"
                        });
                });

            modelBuilder.Entity("WeLearn.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Bulgarian Language",
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(878),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Mathematics",
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(1718),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Informatics",
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(1721),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "IT",
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(1722),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Geography",
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(1724),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            CategoryName = "Physical Education and Sport",
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(1725),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 7,
                            CategoryName = "Literature",
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(1727),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 8,
                            CategoryName = "Civic Education",
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(1729),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 9,
                            CategoryName = "English Language",
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(1730),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 10,
                            CategoryName = "Russian Language",
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(1731),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 11,
                            CategoryName = "History",
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(1733),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 12,
                            CategoryName = "Biology",
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(1735),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 13,
                            CategoryName = "Chemistry",
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(1736),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 14,
                            CategoryName = "Music",
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(1738),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 15,
                            CategoryName = "Art",
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(1739),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 16,
                            CategoryName = "Technologies and Entrepreneurship",
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(1740),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 17,
                            CategoryName = "Others",
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(1742),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("WeLearn.Data.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("PostId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "96f2bde2-eafb-4fe6-b5e9-fe36f009b8e6",
                            Content = "I like it!",
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 297, DateTimeKind.Utc).AddTicks(4159),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            PostId = 1
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = "96f2bde2-eafb-4fe6-b5e9-fe36f009b8e6",
                            Content = "Good, but can be imroved.",
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 297, DateTimeKind.Utc).AddTicks(6099),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            PostId = 2
                        },
                        new
                        {
                            Id = 3,
                            ApplicationUserId = "96f2bde2-eafb-4fe6-b5e9-fe36f009b8e6",
                            Content = "This is very nice.",
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 297, DateTimeKind.Utc).AddTicks(6102),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            PostId = 3
                        });
                });

            modelBuilder.Entity("WeLearn.Data.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.ToTable("Materials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(8408),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Link = "...",
                            MaterialName = "Teaching"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(9643),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Link = "...",
                            MaterialName = "Teaching"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(9646),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Link = "...",
                            MaterialName = "Coding"
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(9647),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Link = "...",
                            MaterialName = "Office Suite"
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(9649),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Link = "...",
                            MaterialName = "Ukraine"
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(9650),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Link = "...",
                            MaterialName = "Football"
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(9652),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Link = "...",
                            MaterialName = "Literature"
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(9653),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Link = "...",
                            MaterialName = "Human Rights"
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(9654),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Link = "...",
                            MaterialName = "Modal Verbs"
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(9655),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Link = "...",
                            MaterialName = "Russian Language"
                        },
                        new
                        {
                            Id = 11,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(9657),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Link = "...",
                            MaterialName = "History"
                        },
                        new
                        {
                            Id = 12,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(9658),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Link = "...",
                            MaterialName = "Biology"
                        },
                        new
                        {
                            Id = 13,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(9659),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Link = "...",
                            MaterialName = "Chemistry"
                        },
                        new
                        {
                            Id = 14,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(9660),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Link = "...",
                            MaterialName = "Music"
                        },
                        new
                        {
                            Id = 15,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(9662),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Link = "...",
                            MaterialName = "Painting"
                        },
                        new
                        {
                            Id = 16,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(9663),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Link = "...",
                            MaterialName = "Entrepreneurship"
                        });
                });

            modelBuilder.Entity("WeLearn.Data.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MaterialId")
                        .HasColumnType("integer");

                    b.Property<string>("PostName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("VideoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("VideoId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "96f2bde2-eafb-4fe6-b5e9-fe36f009b8e6",
                            CategoryId = 1,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(6564),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A lecture about pronouns and when to use them.",
                            Grade = 0,
                            IsDeleted = false,
                            MaterialId = 1,
                            PostName = "Pronouns, types",
                            VideoId = 1
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = "96f2bde2-eafb-4fe6-b5e9-fe36f009b8e6",
                            CategoryId = 2,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(7757),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A natural number greater than 1 that is not a product of two smaller natural numbers.",
                            Grade = 0,
                            IsDeleted = false,
                            MaterialId = 2,
                            PostName = "Prime numbers",
                            VideoId = 2
                        },
                        new
                        {
                            Id = 3,
                            ApplicationUserId = "96f2bde2-eafb-4fe6-b5e9-fe36f009b8e6",
                            CategoryId = 3,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(7760),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "About the C# language and the .NET development Platform. First steps.",
                            Grade = 0,
                            IsDeleted = false,
                            MaterialId = 3,
                            PostName = "Developing with C#",
                            VideoId = 3
                        },
                        new
                        {
                            Id = 4,
                            ApplicationUserId = "96f2bde2-eafb-4fe6-b5e9-fe36f009b8e6",
                            CategoryId = 4,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(7762),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Data analysis.",
                            Grade = 0,
                            IsDeleted = false,
                            MaterialId = 4,
                            PostName = "Excel",
                            VideoId = 4
                        },
                        new
                        {
                            Id = 5,
                            ApplicationUserId = "96f2bde2-eafb-4fe6-b5e9-fe36f009b8e6",
                            CategoryId = 5,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(7764),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Eastern European Countries. Their iconomic growth and political stances. Ukraine.",
                            Grade = 0,
                            IsDeleted = false,
                            MaterialId = 5,
                            PostName = "Ukraine, Eastern Europe",
                            VideoId = 5
                        },
                        new
                        {
                            Id = 6,
                            ApplicationUserId = "96f2bde2-eafb-4fe6-b5e9-fe36f009b8e6",
                            CategoryId = 6,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(7765),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kicking a ball on the field.",
                            Grade = 0,
                            IsDeleted = false,
                            MaterialId = 6,
                            PostName = "Football",
                            VideoId = 6
                        },
                        new
                        {
                            Id = 7,
                            ApplicationUserId = "96f2bde2-eafb-4fe6-b5e9-fe36f009b8e6",
                            CategoryId = 7,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(7767),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A peek into Shakespere's art.",
                            Grade = 0,
                            IsDeleted = false,
                            MaterialId = 7,
                            PostName = "William Shakespere's 106 sonnet",
                            VideoId = 7
                        },
                        new
                        {
                            Id = 8,
                            ApplicationUserId = "96f2bde2-eafb-4fe6-b5e9-fe36f009b8e6",
                            CategoryId = 8,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(7768),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A lecture about rights of the people.",
                            Grade = 0,
                            IsDeleted = false,
                            MaterialId = 8,
                            PostName = "Human rights",
                            VideoId = 8
                        },
                        new
                        {
                            Id = 9,
                            ApplicationUserId = "96f2bde2-eafb-4fe6-b5e9-fe36f009b8e6",
                            CategoryId = 9,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(7770),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "We use modals to show if we believe something is certain, possible or impossible.",
                            Grade = 0,
                            IsDeleted = false,
                            MaterialId = 9,
                            PostName = "Modal verbs",
                            VideoId = 9
                        },
                        new
                        {
                            Id = 10,
                            ApplicationUserId = "96f2bde2-eafb-4fe6-b5e9-fe36f009b8e6",
                            CategoryId = 10,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(7771),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A lecture about the verbs of motion and when to use them.",
                            Grade = 0,
                            IsDeleted = false,
                            MaterialId = 10,
                            PostName = "Verbs of motion",
                            VideoId = 10
                        },
                        new
                        {
                            Id = 11,
                            ApplicationUserId = "96f2bde2-eafb-4fe6-b5e9-fe36f009b8e6",
                            CategoryId = 11,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(7773),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A brief peek into our ancestors' life.",
                            Grade = 0,
                            IsDeleted = false,
                            MaterialId = 11,
                            PostName = "Peek in the past",
                            VideoId = 11
                        },
                        new
                        {
                            Id = 12,
                            ApplicationUserId = "96f2bde2-eafb-4fe6-b5e9-fe36f009b8e6",
                            CategoryId = 12,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(7774),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A lesson about the different types of cells and their differences.",
                            Grade = 0,
                            IsDeleted = false,
                            MaterialId = 12,
                            PostName = "Cells. Prokaryotic and Eukaryotic",
                            VideoId = 12
                        },
                        new
                        {
                            Id = 13,
                            ApplicationUserId = "96f2bde2-eafb-4fe6-b5e9-fe36f009b8e6",
                            CategoryId = 13,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(7775),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A lesson about acids, they effects on the environtment and usage cases.",
                            Grade = 0,
                            IsDeleted = false,
                            MaterialId = 13,
                            PostName = "Acids, Bases and pH",
                            VideoId = 13
                        },
                        new
                        {
                            Id = 14,
                            ApplicationUserId = "96f2bde2-eafb-4fe6-b5e9-fe36f009b8e6",
                            CategoryId = 14,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(7777),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Genres, instruments and notation.",
                            Grade = 0,
                            IsDeleted = false,
                            MaterialId = 14,
                            PostName = "Popular music",
                            VideoId = 14
                        },
                        new
                        {
                            Id = 15,
                            ApplicationUserId = "96f2bde2-eafb-4fe6-b5e9-fe36f009b8e6",
                            CategoryId = 15,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(7779),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Pigments, brushes, bases, matrices.",
                            Grade = 0,
                            IsDeleted = false,
                            MaterialId = 15,
                            PostName = "Painting",
                            VideoId = 15
                        },
                        new
                        {
                            Id = 16,
                            ApplicationUserId = "96f2bde2-eafb-4fe6-b5e9-fe36f009b8e6",
                            CategoryId = 16,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(7780),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Creating a new business, bearing most of the risks and enjoying most of the rewards.",
                            Grade = 0,
                            IsDeleted = false,
                            MaterialId = 16,
                            PostName = "Entrepreneurship",
                            VideoId = 16
                        });
                });

            modelBuilder.Entity("WeLearn.Data.Models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text");

                    b.Property<int?>("CommentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateResolved")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("boolean");

                    b.Property<int?>("PostId")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CommentId");

                    b.HasIndex("PostId");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 297, DateTimeKind.Utc).AddTicks(6895),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bad language in lesson's title.",
                            IsDeleted = false,
                            IsResolved = false,
                            PostId = 5,
                            Subject = "The language used in title"
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = "96f2bde2-eafb-4fe6-b5e9-fe36f009b8e6",
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 297, DateTimeKind.Utc).AddTicks(8657),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "This username is unacceptable.",
                            IsDeleted = false,
                            IsResolved = false,
                            Subject = "Bad words in username"
                        },
                        new
                        {
                            Id = 3,
                            CommentId = 1,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 297, DateTimeKind.Utc).AddTicks(9058),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bad language in comment.",
                            IsDeleted = false,
                            IsResolved = false,
                            Subject = "Swearing in comment"
                        });
                });

            modelBuilder.Entity("WeLearn.Data.Models.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("VideoContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VideoName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.ToTable("Videos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(2494),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Link = "/uploads/videos/modal-verbs.mp4",
                            VideoContentType = "video/mp4",
                            VideoName = "Teaching"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(4225),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Link = "/uploads/videos/man-teaching.mp4",
                            VideoContentType = "video/mp4",
                            VideoName = "Teaching"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(4229),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Link = "/uploads/videos/coding.mp4",
                            VideoContentType = "video/mp4",
                            VideoName = "Coding"
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(4230),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Link = "/uploads/videos/office-suite.mp4",
                            VideoContentType = "video/mp4",
                            VideoName = "Office Suite"
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(4232),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Link = "/uploads/videos/eastern-europe.mp4",
                            VideoContentType = "video/mp4",
                            VideoName = "Ukraine"
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(4233),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Link = "/uploads/videos/football.mp4",
                            VideoContentType = "video/mp4",
                            VideoName = "Football"
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(4234),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Link = "/uploads/videos/literature.mp4",
                            VideoContentType = "video/mp4",
                            VideoName = "Literature"
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(4236),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Link = "/uploads/videos/human-rights.mp4",
                            VideoContentType = "video/mp4",
                            VideoName = "Human Rights"
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(4237),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Link = "/uploads/videos/modal-verbs.mp4",
                            VideoContentType = "video/mp4",
                            VideoName = "Modal Verbs"
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(4238),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Link = "/uploads/videos/russian-language.mp4",
                            VideoContentType = "video/mp4",
                            VideoName = "Russian Language"
                        },
                        new
                        {
                            Id = 11,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(4240),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Link = "/uploads/videos/history.mp4",
                            VideoContentType = "video/mp4",
                            VideoName = "History"
                        },
                        new
                        {
                            Id = 12,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(4241),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Link = "/uploads/videos/biology.mp4",
                            VideoContentType = "video/mp4",
                            VideoName = "Biology"
                        },
                        new
                        {
                            Id = 13,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(4242),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Link = "/uploads/videos/chemistry.mp4",
                            VideoContentType = "video/mp4",
                            VideoName = "Chemistry"
                        },
                        new
                        {
                            Id = 14,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(4244),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Link = "/uploads/videos/music.mp4",
                            VideoContentType = "video/mp4",
                            VideoName = "Music"
                        },
                        new
                        {
                            Id = 15,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(4245),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Link = "/uploads/videos/painting.mp4",
                            VideoContentType = "video/mp4",
                            VideoName = "Painting"
                        },
                        new
                        {
                            Id = 16,
                            DateCreated = new DateTime(2021, 5, 3, 20, 0, 47, 298, DateTimeKind.Utc).AddTicks(4247),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Link = "/uploads/videos/entrepreneurship.mp4",
                            VideoContentType = "video/mp4",
                            VideoName = "Entrepreneurship"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("WeLearn.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WeLearn.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WeLearn.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("WeLearn.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeLearn.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WeLearn.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WeLearn.Data.Models.Comment", b =>
                {
                    b.HasOne("WeLearn.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Comments")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WeLearn.Data.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Post", b =>
                {
                    b.HasOne("WeLearn.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Posts")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WeLearn.Data.Models.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeLearn.Data.Models.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeLearn.Data.Models.Video", "Video")
                        .WithMany()
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Category");

                    b.Navigation("Material");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Report", b =>
                {
                    b.HasOne("WeLearn.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Reports")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WeLearn.Data.Models.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId");

                    b.HasOne("WeLearn.Data.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Comment");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("WeLearn.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Posts");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("WeLearn.Data.Models.Category", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
